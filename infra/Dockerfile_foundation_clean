FROM ubuntu:24.04
ARG DEBIAN_FRONTEND=noninteractive

WORKDIR /tmp

# Prerequisites
RUN apt-get update \
  && apt-get install \
       build-essential software-properties-common apt-transport-https lsb-release ca-certificates \
       sudo \
       libreadline-dev zlib1g-dev libssl-dev libpcre3 libpcre3-dev \
       libhiredis-dev libsqlite3-dev libjemalloc-dev gettext-base \
       git gpg gnupg2 make cmake wget curl lsof unzip jq gcc tcc bc \
       x11vnc xvfb entr \
       docker.io docker-compose \
       openjdk-11-jdk openjfx \
       python3 python3-pip r-base -y 
  
# R
# RUN R -e "install.packages('jsonlite',dependencies=TRUE, repos='http://cran.rstudio.com/')"
# RUN apt-get install -y r-cran-jsonlite 
RUN R -e "install.packages('jsonlite',repos='https://cloud.r-project.org/')"
RUN ln -s /usr/bin/R /usr/bin/r

# Leiningen
RUN wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein && chmod +x lein && mv lein /usr/bin/lein

# Node
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash \
 && apt-get update && apt-get install nodejs -y

# Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y && ln -s /root/.cargo/bin/rustc /usr/bin/rustc

# Mesa
RUN add-apt-repository -y ppa:kisak/kisak-mesa && apt update && apt -y upgrade

# Minio
RUN ARCH=$(uname -m) && \
    case $ARCH in \
        x86_64) \
            MINIO_URL="https://dl.min.io/server/minio/release/linux-amd64/minio"; \
            ;; \
        aarch64) \
            MINIO_URL="https://dl.min.io/server/minio/release/linux-arm64/minio"; \
            ;; \
        *) \
            echo "Unsupported architecture: $ARCH"; \
            exit 1; \
            ;; \
    esac && \
    curl -o /usr/bin/minio $MINIO_URL && \
    chmod +x /usr/bin/minio

# Java
ENV JAVA_HOME=/usr/lib/jvm/default-java

# Vnc
RUN mkdir /root/.vnc
RUN x11vnc -storepasswd 1234 /root/.vnc/passwd

# Node MODULES
ENV NODE_PATH=/usr/lib/node_modules
RUN npm -g install ganache http-server pnpm yarn \
  && npm -g install \
    @react-native-async-storage/async-storage \
    blessed@0.1.81 \
    blessed-contrib@4.10.1 \
    bresenham@0.0.4 \
    chalk@4.1.2 \
    crypto-js \
    dateformat@5.0.2 \
    drawille \
    eventsource@1.1.0 \
    fastify \
    gl-matrix \
    javascript-time-ago@2.3.10 \
    osc-js \
    node-fetch@2.6.6 \
    node-localstorage@2.2.1 \
    pg \
    react-blessed-contrib \
    react-blessed@0.7.2 \
    react@17.0.2 \
    redis \
    sql.js \
    tiny-worker \
    ua-parser-js \
    valtio \
    uuid@8.3.2 \
    window \
    ws \
  && npm -g install bip32 bip39 bip84 bitcoinjs-lib@5.2.0 bitcoinjs-message@2.2.0 ecpair safe-buffer tiny-secp256k1 wif \
  && npm -g install ethers@5.7.2 solc@0.8.17

# Quickjs
ENV QUICKJS_VERSION=2024-01-13
RUN ARCH=$(uname -m) && \
    case $ARCH in \
        x86_64) \
            wget https://bellard.org/quickjs/binary_releases/quickjs-linux-x86_64-${QUICKJS_VERSION}.zip; \ 
            unzip quickjs-linux-x86_64-${QUICKJS_VERSION}.zip; \
            mv qjs /usr/local/bin; \
            ;; \
        aarch64) \
            wget https://bellard.org/quickjs/binary_releases/quickjs-cosmo-${QUICKJS_VERSION}.zip; \ 
            unzip quickjs-cosmo-${QUICKJS_VERSION}.zip; \
            mv qjs /usr/local/bin; \
            ;; \
        *) \
            echo "Torch not installed: $ARCH"; \
            ;; \
    esac
RUN 

# Python
ENV PIP_BREAK_SYSTEM_PACKAGES 1
RUN ln -s /usr/bin/python3 /usr/bin/python
RUN pip3 install websocket redis

# Openresty/Nginx
ENV OPENRESTY_VERSION=1.25.3.2
ENV LUAROCKS_VERSION=3.11.1
ENV NCHAN_VERSION=1.3.7
RUN wget https://openresty.org/download/openresty-${OPENRESTY_VERSION}.tar.gz && tar -xf openresty-${OPENRESTY_VERSION}.tar.gz \
  && wget https://github.com/slact/nchan/archive/refs/tags/v${NCHAN_VERSION}.tar.gz && tar -xf v${NCHAN_VERSION}.tar.gz \
  && wget https://luarocks.github.io/luarocks/releases/luarocks-${LUAROCKS_VERSION}.tar.gz && tar -xf luarocks-${LUAROCKS_VERSION}.tar.gz
RUN cd openresty-${OPENRESTY_VERSION} && ./configure --add-module=../nchan-${NCHAN_VERSION} --with-pcre-jit \
        --with-ipv6 --prefix=/opt/openresty \
        && make && make install
RUN cd luarocks-${LUAROCKS_VERSION} && ./configure --prefix=/opt/openresty/luajit --with-lua=/opt/openresty/luajit \
        --lua-suffix=jit --with-lua-include=/opt/openresty/luajit/include/luajit-2.1 \
        && make && make install
ENV PATH=/opt/openresty/bin:/opt/openresty/luajit/bin:/opt/openresty/nginx/sbin:$PATH

# Luarocks
RUN /opt/openresty/luajit/bin/luarocks install luasocket \
  && /opt/openresty/luajit/bin/luarocks install lustache \
  && /opt/openresty/luajit/bin/luarocks install lua-cjson \
  && /opt/openresty/luajit/bin/luarocks install lua-crypt \
  && /opt/openresty/luajit/bin/luarocks install lua-resty-openssl \
  && /opt/openresty/luajit/bin/luarocks install lua-resty-http \
  && /opt/openresty/luajit/bin/luarocks install lua-resty-uuid \
  && /opt/openresty/luajit/bin/luarocks install lua-resty-mail \
  && /opt/openresty/luajit/bin/luarocks install lsqlite3 \
  && /opt/openresty/luajit/bin/luarocks install multipart \
  && /opt/openresty/luajit/bin/luarocks install pgmoon \
  && /opt/openresty/luajit/bin/luarocks install luaposix

# Redis
ENV REDIS_VERSION=6.2.1
ENV LUAJIT_VERSION=2.1.2
RUN wget https://github.com/zcaudate/redis-luajit/archive/refs/tags/v${REDIS_VERSION}-luajit.tar.gz && tar -xf v${REDIS_VERSION}-luajit.tar.gz \
 && wget https://github.com/zcaudate/LuaJIT/archive/refs/tags/${LUAJIT_VERSION}-redis.tar.gz && tar -xf ${LUAJIT_VERSION}-redis.tar.gz \
 && rm -R redis-luajit-${REDIS_VERSION}-luajit/deps/LuaJIT \
 && mv LuaJIT-${LUAJIT_VERSION}-redis redis-luajit-${REDIS_VERSION}-luajit/deps/LuaJIT 
RUN cd redis-luajit-${REDIS_VERSION}-luajit && make && make PREFIX=/opt/redis install
RUN cd redis-luajit-${REDIS_VERSION}-luajit/deps/LuaJIT && make install
RUN mv /usr/local/bin/luajit-2.1.0-beta3 /usr/local/bin/luajit
ENV PATH=/opt/redis/bin:$PATH

# Postgres
ENV REDIS_WRAPPER_VERSION=0.1.0
RUN sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
RUN curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg
RUN apt update && apt install -y postgresql-plpython3-15 postgresql-server-dev-15 libhiredis-dev
RUN wget https://github.com/zcaudate-xyz/redis_wrapper/archive/refs/tags/${REDIS_WRAPPER_VERSION}.tar.gz && tar -xf ${REDIS_WRAPPER_VERSION}.tar.gz
RUN cd redis_wrapper-${REDIS_WRAPPER_VERSION} && make && make install

# Postgres Password
ENV PG_HBA_FILE "/etc/postgresql/15/main/pg_hba.conf"
RUN sudo sed -i 's/local\s\+all\s\+postgres\s\+peer/local   all             postgres                                trust/' "$PG_HBA_FILE"
# RUN service postgresql start
# RUN sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"

# Torch
RUN ARCH=$(uname -m) && \
    case $ARCH in \
        x86_64) \
            git clone https://github.com/torch/distro.git /opt/torch --recursive; \
            cd /opt/torch; \
            ./install.sh; \
            /opt/torch/install/bin/luarocks install luasocket; \
            /opt/torch/install/bin/luarocks install lustache; \
            /opt/torch/install/bin/luarocks install lsqlite3; \
            /opt/torch/install/bin/luarocks install lua-cjson; \
            rm /root/.profile \
            ;; \
        *) \
            echo "Torch not installed: $ARCH"; \
            ;; \
    esac
ENV PATH=/opt/torch/install/bin/:$PATH

# Clojure
ADD ./infra/project.clj project.clj
RUN lein deps && rm project.clj

# Entrypoint
ADD ./infra/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
